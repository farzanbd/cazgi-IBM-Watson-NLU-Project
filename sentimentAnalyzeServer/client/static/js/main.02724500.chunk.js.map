{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","className","Object","entries","this","props","emotions","map","mapentry","React","Component","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderTextArea","document","getElementById","value","setState","renderTextBox","sendForSentimentAnalysis","url","axios","get","then","response","output","data","label","console","log","style","color","fontSize","JSON","stringify","sendForEmotionAnalysis","emotion","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"wPA0BeA,G,kLArBT,OACE,8BACE,uBAAOC,UAAU,uBAAjB,SACE,gCAEIC,OAAOC,QAAQC,KAAKC,MAAMC,UAAUC,KAAI,SAASC,GACjD,OACI,+BACA,6BAAKA,EAAS,KACd,6BAAKA,EAAS,qB,GAXPC,IAAMC,Y,gBC8FlBC,E,4MA1FbC,MAAQ,CAACC,UAAU,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cACzCC,KAAM,OACRC,gBAAgB,GAChBC,WAAU,G,EAGlBC,eAAiB,WACfC,SAASC,eAAe,aAAaC,MAAQ,GACtB,QAApB,EAAKX,MAAMK,MACZ,EAAKO,SAAS,CAACX,UAAU,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cACzDC,KAAM,OACNC,gBAAgB,GAChBC,WAAU,K,EAKdM,cAAgB,WACdJ,SAASC,eAAe,aAAaC,MAAQ,GACtB,SAApB,EAAKX,MAAMK,MACZ,EAAKO,SAAS,CAACX,UAAU,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cACzDC,KAAM,MACNC,gBAAgB,GAChBC,WAAU,K,EAKdO,yBAA2B,WACzB,EAAKF,SAAS,CAACL,WAAU,IACzB,IACIQ,EAAM,IAGRA,EADqB,QAApB,EAAKf,MAAMK,KACNU,EAAI,sBAAsBN,SAASC,eAAe,aAAaC,MAE/DI,EAAI,wBAAwBN,SAASC,eAAe,aAAaC,MAEnEK,IAAMC,IAAIF,GACZG,MAAK,SAACC,GAER,IAEIC,EAFEb,EAAYY,EAASE,KAAK,GAAGd,UAAUe,MAC7CC,QAAQC,IAAI,aAAejB,GAGzBa,EADe,aAAdb,EACQ,qBAAKkB,MAAO,CAACC,MAAM,QAAQC,SAAS,IAApC,SAA0CC,KAAKC,UAAUV,EAASE,QACpD,aAAdd,EACA,qBAAKkB,MAAO,CAACC,MAAM,MAAMC,SAAS,IAAlC,SAAwCC,KAAKC,UAAUV,EAASE,QAEhE,qBAAKI,MAAO,CAACC,MAAM,SAASC,SAAS,IAArC,SAA2CC,KAAKC,UAAUV,EAASE,QAE9E,EAAKT,SAAS,CAACN,gBAAgBc,Q,EAInCU,uBAAyB,WACvB,EAAKlB,SAAS,CAACL,WAAU,IACzB,IACIQ,EAAM,IAERA,EADqB,QAApB,EAAKf,MAAMK,KACNU,EAAI,oBAAoBN,SAASC,eAAe,aAAaC,MAE7DI,EAAI,uBAAuBN,SAASC,eAAe,aAAaC,MAElEK,IAAMC,IAAIF,GAEZG,MAAK,SAACC,GACRI,QAAQC,IAAI,WAAaL,EAASE,KAAK,GAAGU,SAC1C,EAAKnB,SAAS,CAACN,gBAAgB,cAAC,EAAD,CAAcZ,SAAUyB,EAASE,KAAK,GAAGU,gB,uDAM1E,OACE,sBAAK1C,UAAU,MAAf,UACA,wBAAQA,UAAU,eAAe2C,QAASxC,KAAKgB,eAA/C,kBACE,wBAAQnB,UAAU,eAAgB2C,QAASxC,KAAKqB,cAAhD,iBACA,uBAAK,uBACJrB,KAAKQ,MAAMC,UACZ,uBACA,wBAAQZ,UAAU,cAAc2C,QAASxC,KAAKsB,yBAA9C,+BACA,wBAAQzB,UAAU,cAAc2C,QAASxC,KAAKsC,uBAA9C,6BACA,uBACKtC,KAAKQ,MAAMM,uB,GArFNT,IAAMC,WCMTmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlC,SAASC,eAAe,SAM1BuB,K","file":"static/js/main.02724500.chunk.js","sourcesContent":["import React from 'react';\nimport './bootstrap.min.css';\n\nclass EmotionTable extends React.Component {\n    render() {\n      return (  \n        <div>\n          <table className=\"table table-bordered\">\n            <tbody>\n            {\n                Object.entries(this.props.emotions).map(function(mapentry) {\n                return (\n                    <tr>\n                    <td>{mapentry[0]}</td>\n                    <td>{mapentry[1]}</td>\n                    </tr>\n                )\n                })\n            }\n            </tbody>\n          </table>\n          </div>\n          );\n        }\n    \n}\nexport default EmotionTable;\n","import './bootstrap.min.css';\nimport './App.css';\nimport EmotionTable from './EmotionTable.js';\nimport React from 'react';\nimport axios from 'axios';\n\nclass App extends React.Component {\n  state = {innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\n            mode: \"text\",\n          sentimentOutput:[],\n          sentiment:true\n        }\n  \n  renderTextArea = ()=>{\n    document.getElementById(\"textinput\").value = \"\";\n    if(this.state.mode === \"url\") {\n      this.setState({innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\n      mode: \"text\",\n      sentimentOutput:[],\n      sentiment:true\n    })\n    } \n  }\n\n  renderTextBox = ()=>{\n    document.getElementById(\"textinput\").value = \"\";\n    if(this.state.mode === \"text\") {\n      this.setState({innercomp:<textarea rows=\"1\" cols=\"50\" id=\"textinput\"/>,\n      mode: \"url\",\n      sentimentOutput:[],\n      sentiment:true\n    })\n    }\n  }\n\n  sendForSentimentAnalysis = () => {\n    this.setState({sentiment:true});\n    let ret = \"\";\n    let url = \".\";\n\n    if(this.state.mode === \"url\") {\n      url = url+\"/url/sentiment?url=\"+document.getElementById(\"textinput\").value;\n    } else {\n      url = url+\"/text/sentiment?text=\"+document.getElementById(\"textinput\").value;\n    }\n    ret = axios.get(url);\n    ret.then((response)=>{\n      //Include code here to check the sentiment and fomrat the data accordingly\n      const sentiment = response.data[0].sentiment.label;\n      console.log('sentiment:' + sentiment);\n      let output;\n      if(sentiment === \"positive\") {\n        output = <div style={{color:\"green\",fontSize:20}}>{JSON.stringify(response.data)}</div>\n      } else if (sentiment === \"negative\"){\n        output = <div style={{color:\"red\",fontSize:20}}>{JSON.stringify(response.data)}</div>\n      } else {\n        output = <div style={{color:\"orange\",fontSize:20}}>{JSON.stringify(response.data)}</div>\n      }\n      this.setState({sentimentOutput:output});\n    });\n  }\n\n  sendForEmotionAnalysis = () => {\n    this.setState({sentiment:false});\n    let ret = \"\";\n    let url = \".\";\n    if(this.state.mode === \"url\") {\n      url = url+\"/url/emotion?url=\"+document.getElementById(\"textinput\").value;\n    } else {\n      url = url+\"/text/emotion/?text=\"+document.getElementById(\"textinput\").value;\n    }\n    ret = axios.get(url);\n\n    ret.then((response)=>{\n      console.log('emotion:' + response.data[0].emotion);\n      this.setState({sentimentOutput:<EmotionTable emotions={response.data[0].emotion}/>});\n  });\n  }\n  \n\n  render() {\n    return (  \n      <div className=\"App\">\n      <button className=\"btn btn-info\" onClick={this.renderTextArea}>Text</button>\n        <button className=\"btn btn-dark\"  onClick={this.renderTextBox}>URL</button>\n        <br/><br/>\n        {this.state.innercomp}\n        <br/>\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\n        <br/>\n            {this.state.sentimentOutput}\n      </div>\n    );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}